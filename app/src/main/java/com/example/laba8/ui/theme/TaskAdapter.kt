package com.example.laba8.ui.theme                      //Определяет пакет, к которому принадлежит этот файл. Пакеты помогают организовать код в проекте, структурируя его по функциональным модулям.

import android.content.Context                          //Предоставляет доступ к ресурсам приложения и другим важным данным.
import android.view.LayoutInflater                      //Используется для создания (инфлейта) объектов интерфейса из XML-файлов разметки.
import android.view.ViewGroup                           //Контейнер, который может содержать другие виды (View).
import androidx.recyclerview.widget.RecyclerView        //Компонент для отображения списков элементов с возможностью прокрутки.
import com.example.laba8.R                              //Содержит ссылки на ресурсы проекта, такие как макеты, строки и изображения.
import com.example.laba8.model.Task                     //Класс, представляющий задачу (модель данных).


//Объявляет класс TaskAdapter, который наследуется от RecyclerView.Adapter. Это означает, что TaskAdapter будет использоваться для управления элементами списка RecyclerView.
class TaskAdapter(private var tasks: MutableList<Task>, private val context: Context) : RecyclerView.Adapter<TaskHolder>() {

    //Переопределяет метод onCreateViewHolder, который отвечает за создание нового объекта ViewHolder (в данном случае TaskHolder). Этот метод вызывается, когда RecyclerView нуждается в новом представлении для отображения элемента списка.
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TaskHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_task_list, parent, false)      //Инфлейтит XML-файл item_task_list.xml (определяющий внешний вид одного элемента списка) и создаёт объект View. (инфлейт - создание полноценных java-объектов - виджетов экрана, с которыми можно работать из кода по их "описанию" в xml-разметке.)  ( LayoutInflater – это класс, который умеет из содержимого layout-файла создать View-элемент. Метод который это делает называется inflate.)
        return TaskHolder(view, context, this)          //Возвращает новый экземпляр TaskHolder, который будет использоваться для управления этим элементом списка. Передаёт ему созданное представление (view), контекст приложения и ссылку на текущий адаптер (this).
    }

    //Переопределяет метод onBindViewHolder, который отвечает за привязку данных к конкретному элементу списка. Этот метод вызывается RecyclerView для отображения данных в указанной позиции.
    override fun onBindViewHolder(holder: TaskHolder, position: Int) {      //holder: TaskHolder: Объект ViewHolder, который будет использоваться для отображения данных. position: Int: Позиция элемента в списке данных (tasks).
        val task = tasks[position]      //Получает задачу (Task) из списка tasks по указанной позиции.
        holder.bind(task)               //Вызывает метод bind объекта TaskHolder, передавая ему задачу. Этот метод отвечает за обновление содержимого представления элемента списка с данными задачи.
    }

    override fun getItemCount(): Int {      //Переопределяет метод getItemCount, который возвращает общее количество элементов в списке. RecyclerView использует этот метод, чтобы знать, сколько элементов нужно отобразить.
        return tasks.size                   //Возвращает размер списка задач (tasks), то есть количество задач, которые будут отображены в списке.
    }


    //Определяет функцию updateTasks, которая принимает новый список задач (newTasks) и обновляет текущий список tasks.
    fun updateTasks(newTasks: List<Task>) {         //newTasks: List<Task>: Новый список задач, который нужно отобразить.
        tasks.clear()                               //Очищает текущий список задач, удаляя все существующие элементы.
        tasks.addAll(newTasks)                      //Добавляет все элементы из нового списка newTasks в текущий список tasks.
        notifyDataSetChanged()                      //Уведомляет адаптер о том, что данные изменились, и требуется обновить весь список. Это приводит к перерисовке всех элементов списка на экране.
    }


    //Определяет функцию removeItem, которая удаляет задачу из списка по указанной позиции.
    fun removeItem(position: Int) {     //position: Int: Позиция элемента в списке, который нужно удалить.
        tasks.removeAt(position)        //tasks.removeAt(position): Удаляет задачу из списка tasks по указанной позиции.
        notifyItemRemoved(position)     //notifyItemRemoved(position): Уведомляет адаптер о том, что элемент был удалён, и требует обновления только этой позиции. Это приводит к анимации удаления элемента из списка, делая процесс более плавным и эффективным.
    }


    // Определяет функцию getTaskAt, которая возвращает задачу из списка по указанной позиции.
    fun getTaskAt(position: Int): Task {    //position: Int: Позиция элемента в списке. Task: Указывает, что функция возвращает объект типа Task.
        return tasks[position]              //return tasks[position]: Возвращает задачу из списка tasks по указанной позиции.
    }
}


//   Итоговая функциональность класса TaskAdapter
//   Этот класс играет ключевую роль в отображении списка задач в вашем Android-приложении.
//1. Создание представлений элементов списка: Метод onCreateViewHolder создаёт новые элементы списка, инфлейтя их из XML-файла разметки item_task_list.xml.
//2. Связывание данных с элементами списка: Метод onBindViewHolder связывает конкретную задачу с элементом списка, используя метод bind класса TaskHolder.
//3. Управление количеством элементов: Метод getItemCount сообщает RecyclerView, сколько элементов нужно отобразить.
//4. Обновление списка задач: Метод updateTasks позволяет обновить весь список задач, заменяя его новым списком и перерисовывая интерфейс.
//5. Удаление элемента из списка: Метод removeItem удаляет задачу по указанной позиции и уведомляет адаптер об изменении, чтобы обновить интерфейс.
//6. Получение задачи по позиции: Метод getTaskAt позволяет получить задачу из списка по её позиции, что может быть полезно для различных операций, таких как удаление или редактирование задачи.

//   Этот файл отвечает за управление и отображение списка задач в приложении с помощью компонента RecyclerView. Он определяет адаптер (TaskAdapter), который связывает данные (список задач) с пользовательским интерфейсом, позволяя эффективно отображать, обновлять и удалять задачи в списке.
//   Адаптер управляет созданием и связыванием элементов списка (задач) с пользовательским интерфейсом. Проще говоря, он отвечает за то, как каждая задача будет отображаться на экране и как взаимодействовать с данными задач.


//Файл с классом TaskAdapter является неотъемлемой частью механизма отображения списка задач в вашем Android-приложении. Он обеспечивает эффективное управление данными задач и их отображение в пользовательском интерфейсе с помощью RecyclerView. Основные задачи адаптера включают создание и связывание представлений элементов списка с данными, обновление списка при изменениях и обработку действий пользователя, таких как удаление задач.